<Application x:Class="KancolleSimulator.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:KancolleSimulator"

             xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
             xmlns:materialDesign="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"

             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>

        
        <ResourceDictionary.MergedDictionaries>
            <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
            <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Blue.xaml" />
            <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Purple.xaml" />
            <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />

            <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
            <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ValidationErrorTemplate.xaml" />
        </ResourceDictionary.MergedDictionaries>

            <Style x:Key="MaterialDesignComboBoxToggleButton2" BasedOn="{StaticResource MaterialDesignComboBoxToggleButton}" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid>
                                <Border x:Name="ToggleTemplateRoot"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                    <Border x:Name="splitBorder"
                                    Margin="0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    BorderBrush="Transparent"
                                    BorderThickness="0">
                                              <!-- Width="8" Height="8" -->
                                        <Path x:Name="arrow"
                                              Width="0" Height="8"
                                              Margin="0"
                                              Stretch="Uniform"
                                              HorizontalAlignment="Right"
                                              VerticalAlignment="Center"
                                              Data="M7,10L12,15L17,10H7Z"
                                              Fill="{TemplateBinding BorderBrush}" />
                                    </Border>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
                                </MultiDataTrigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource PrimaryHueMidBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="ToggleTemplateRoot" Property="BorderBrush" Value="Transparent"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="ToggleTemplateRoot" Property="BorderBrush" Value="Transparent"/>
                                    <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="MaterialDesignFloatingHintComboBoxTemplate2" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot"
              Background="{TemplateBinding Background}"
              SnapsToDevicePixels="True">
                    <Grid x:Name="InnerRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <!-- <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" /> -->
                            <ColumnDefinition Width="0" MinWidth="0" />
                        </Grid.ColumnDefinitions>
                        <ToggleButton x:Name="toggleButton"
                              Grid.ColumnSpan="2"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{StaticResource MaterialDesignComboBoxToggleButton2}"/>
                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                      Margin="{TemplateBinding Padding}"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid x:Name="InputRoot"
                          HorizontalAlignment="Left">
                                <ContentPresenter x:Name="contentPresenter"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False"/>
                                <TextBox x:Name="PART_EditableTextBox"
                                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                 HorizontalAlignment="Left"
                                 HorizontalContentAlignment="Stretch"
                                 Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                 CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                                 Visibility="Collapsed" />

                                <wpf:SmartHint x:Name="Hint"
                                       HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                       FontSize="{TemplateBinding FontSize}"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                       UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                       UseFloating="{Binding Path=(wpf:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                       FloatingScale="{Binding Path=(wpf:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                       FloatingOffset="{Binding Path=(wpf:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"
                                       HintOpacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                       Hint="{TemplateBinding wpf:HintAssist.Hint}" />
                            </Grid>
                            <StackPanel Orientation="Horizontal" Grid.Column="1">
                                <TextBlock
                            FontSize="{TemplateBinding FontSize}"
                            Opacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                            Text="{Binding Path=(wpf:TextFieldAssist.SuffixText), RelativeSource={RelativeSource TemplatedParent}}"
                            />
                                <Button x:Name="PART_ClearButton" Height="Auto" Padding="2,0,-6,0" Style="{DynamicResource MaterialDesignToolButton}">
                                    <Button.Visibility>
                                        <MultiBinding Converter="{StaticResource ClearTextConverter}">
                                            <Binding ElementName="Hint" Path="IsContentNullOrEmpty" Converter="{StaticResource NotConverter}"/>
                                            <Binding Path="(wpf:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </Button.Visibility>
                                    <wpf:PackIcon Margin="0" Kind="CloseCircle" />
                                </Button>
                            </StackPanel>
                        </Grid>
                        <Line x:Name="DashedLine" Grid.ColumnSpan="2" Grid.Column="0" VerticalAlignment="Bottom"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource InverseBoolToVisConverter}}"
                      StrokeThickness="1.25" StrokeDashArray="1,2.5" StrokeDashCap="Round"
                      X1="0" X2="{Binding ActualWidth, ElementName=toggleButton}" Y1="0" Y2="0" 
                      Stroke="{TemplateBinding BorderBrush}" Opacity="0.56" />
                        <wpf:Underline x:Name="Underline"
                               Grid.ColumnSpan="2" Grid.Column="0"
                               IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                               Visibility="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                               Background="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Canvas Grid.Column="0" VerticalAlignment="Bottom">
                            <TextBlock Canvas.Top="2" FontSize="10" MaxWidth="{Binding ActualWidth, ElementName=toggleButton}"
                               Opacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                               Text="{Binding Path=(wpf:HintAssist.HelperText), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Canvas>

                        <wpf:ComboBoxPopup x:Name="PART_Popup"
                                   Grid.Column="0"
                                   AllowsTransparency="true"
                                   Focusable="False"
                                   HorizontalOffset="-11.5"
                                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   PlacementTarget="{Binding ElementName=templateRoot}"
                                   SnapsToDevicePixels="True"
                                   UseLayoutRounding="True"
                                   Placement="Custom"
                                   PopupAnimation="Fade"
                                   VerticalOffset="0"
                                   DefaultVerticalOffset="5"
                                   DownVerticalOffset="-15.5"
                                   UpVerticalOffset="15"
                                   ClassicMode="{Binding Path=(wpf:ComboBoxAssist.ClassicMode), RelativeSource={RelativeSource TemplatedParent}}"
                                   UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                                   DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                                   ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}">
                            <ContentControl>
                                <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                      Background="{Binding Background, ElementName=PART_Popup}">
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </ContentControl>
                        </wpf:ComboBoxPopup>
                    </Grid>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger SourceName="PART_Popup" Property="PopupPlacement" Value="{x:Static materialDesign:ComboBoxPopupPlacement.Classic}">
                        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                        <Setter Property="Background" TargetName="templateRoot" Value="{Binding Background, ElementName=PART_Popup}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
                        <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsEditable" Value="True">
                        <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="wpf:HintAssist.IsFloating" Value="True">
                        <Setter TargetName="InnerRoot" Property="Margin" Value="0 11.5 0 0" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsEditable" Value="False"/>
                            <Condition Property="IsDropDownOpen" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
                        <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                            <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                            <Condition Property="IsKeyboardFocusWithin" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                            <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                            <Condition Property="IsKeyboardFocusWithin" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                            <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                            <Condition Property="IsDropDownOpen" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true" />
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                    </MultiTrigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                    </Trigger>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="true" />
                            <Condition Property="Validation.HasError" Value="true" />
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="true" />
                            <Condition Property="Validation.HasError" Value="false" />
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        <Setter TargetName="Underline" Property="Background" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style BasedOn="{StaticResource MaterialDesignComboBox}" TargetType="{x:Type ComboBox}">
                <Setter Property="Template" Value="{StaticResource MaterialDesignFloatingHintComboBoxTemplate2}" />
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
